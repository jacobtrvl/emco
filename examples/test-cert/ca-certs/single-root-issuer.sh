#!/bin/bash

# this script generates the following resources
# A root Certificate
# A secret to store the root certificate
# A root clusterissuer to issue new certificate
# A certificaterequest to generate new certificate using the above clusterissuer

# A new secret to store the certificate generated by the certificaterequest
# A clusterissuer to issue new certificate to the workloads

# delete
sudo rm -r /home/vagrant/github.com/istio/ca-certs/bar/csr/*
sudo rm -r /home/vagrant/github.com/istio/ca-certs/bar/int/*
sudo rm -r /home/vagrant/github.com/istio/ca-certs/bar/istio/*
sudo rm -r /home/vagrant/github.com/istio/ca-certs/bar/root/*

sudo rm -r /home/vagrant/github.com/istio/ca-certs/foo/csr/*
sudo rm -r /home/vagrant/github.com/istio/ca-certs/foo/int/*
sudo rm -r /home/vagrant/github.com/istio/ca-certs/foo/istio/*
sudo rm -r /home/vagrant/github.com/istio/ca-certs/foo/root/*

sudo rm -r /home/vagrant/github.com/istio/ca-certs/foobar/csr/*
sudo rm -r /home/vagrant/github.com/istio/ca-certs/foobar/int/*
sudo rm -r /home/vagrant/github.com/istio/ca-certs/foobar/istio/*
sudo rm -r /home/vagrant/github.com/istio/ca-certs/foobar/root/*

# delete all the existing resources, if any
kubectl delete secret -n cert-manager foo-root-ca bar-root-ca foobar-root-ca foo-ca bar-ca bar-ca foobar-ca 
kubectl delete clusterIssuer --all
kubectl delete certificateRequest --all

echo "============================================== foo ======================================"
echo "========================================================================================="
pushd /home/vagrant/github.com/istio/ca-certs/foo/

echo "========= Create Root CA ========="
openssl genrsa -out root/foo-ca-key.pem 4096
openssl req -new -key root/foo-ca-key.pem -config root-ca.conf -out root/foo-ca.csr
openssl x509 -req -days 3650 -signkey root/foo-ca-key.pem -extensions req_ext -extfile root-ca.conf -in root/foo-ca.csr -out root/foo-ca-cert.pem

echo "========= Create Root Secret "
cp root/foo-ca-cert.pem root/tls.crt
cp root/foo-ca-key.pem root/tls.key

# secret
kubectl create secret generic foo-root-ca -n cert-manager --from-file=root/tls.crt --from-file=root/tls.key
sudo sleep 15 # for the secret to be available

echo "========= Create Root ClusterIssuer "
kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: foo-root-issuer
spec:
  ca:
    secretName: foo-root-ca
EOF

echo "========= Create CSR for Foo  ClusterIssuer"
openssl genrsa -out csr/foo-csr-key.pem 4096
openssl req -new -key csr/foo-csr-key.pem -config root-ca.conf -out csr/foo.csr
sudo sleep 15 # for clusterIssuer to be available

echo "========= Create CertificateRequest "
kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: CertificateRequest
metadata:
  name: foo-ca-cr
spec:
  request: $(cat csr/foo.csr | base64 -w 0)
  isCA: true
  duration: 2160h
  issuerRef:
    name: foo-root-issuer
    kind: ClusterIssuer
    group: cert-manager.io
EOF
popd
echo "=========================================================================================="

echo "============================================== bar ======================================"
pushd /home/vagrant/github.com/istio/ca-certs/bar/

echo "========= Create Root CA ========="
openssl genrsa -out root/bar-ca-key.pem 4096
openssl req -new -key root/bar-ca-key.pem -config root-ca.conf -out root/bar-ca.csr
openssl x509 -req -days 3650 -signkey root/bar-ca-key.pem -extensions req_ext -extfile root-ca.conf -in root/bar-ca.csr -out root/bar-ca-cert.pem

echo "========= Create Root Secret "
cp root/bar-ca-cert.pem root/tls.crt
cp root/bar-ca-key.pem root/tls.key
# secret
kubectl create secret generic bar-root-ca -n cert-manager --from-file=root/tls.crt --from-file=root/tls.key
sudo sleep 15 # for secret to be available

echo "========= Create Root ClusterIssuer "
kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: bar-root-issuer
spec:
  ca:
    secretName: bar-root-ca
EOF

echo "========= Create CSR for Bar ClusterIssuer"
openssl genrsa -out csr/bar-csr-key.pem 4096
openssl req -new -key csr/bar-csr-key.pem -config root-ca.conf -out csr/bar.csr
sudo sleep 15 # for clusterIssuer to be available

echo "========= Create CertificateRequest "
kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: CertificateRequest
metadata:
  name: bar-ca-cr
spec:
  request: $(cat csr/bar.csr | base64 -w 0)
  isCA: true
  duration: 2160h
  issuerRef:
    name: bar-root-issuer
    kind: ClusterIssuer
    group: cert-manager.io
EOF
popd
echo "========================================================================================="

echo "============================================== foobar ============================="
pushd /home/vagrant/github.com/istio/ca-certs/foobar/

echo "========= Create Root CA ========="
openssl genrsa -out root/foobar-ca-key.pem 4096
openssl req -new -key root/foobar-ca-key.pem -config root-ca.conf -out root/foobar-ca.csr
openssl x509 -req -days 3650 -signkey root/foobar-ca-key.pem -extensions req_ext -extfile root-ca.conf -in root/foobar-ca.csr -out root/foobar-ca-cert.pem

echo "========= Create Root Secret "
cp root/foobar-ca-cert.pem root/tls.crt
cp root/foobar-ca-key.pem root/tls.key
kubectl create secret generic foobar-root-ca -n cert-manager --from-file=root/tls.crt --from-file=root/tls.key
sudo sleep 15 # for secret to be available

echo "========= Create Root ClusterIssuer "
kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: foobar-root-issuer
spec:
  ca:
    secretName: foobar-root-ca
EOF

echo "========= Create CSR for Istio ClusterIssuer"
openssl genrsa -out csr/foobar-csr-key.pem 4096
openssl req -new -key csr/foobar-csr-key.pem -config root-ca.conf -out csr/foobar.csr
sudo sleep 15 # for clusterIssuer to be available

echo "========= Create CertificateRequest "
kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: CertificateRequest
metadata:
  name: foobar-ca-cr
spec:
  request: $(cat csr/foobar.csr | base64 -w 0)
  isCA: true
  duration: 2160h
  issuerRef:
    name: foobar-root-issuer
    kind: ClusterIssuer
    group: cert-manager.io
EOF
popd
echo "=========================================================================================="

echo "-- Wait for clusterissuers and certificaterequest"
sudo sleep 30

kubectl get clusterissuer -o wide
echo "========================================================================================="
kubectl get certificaterequest -o wide
sudo sleep 5
echo "========================================================================================="
echo "\n==================================== Create CertSigners ==============================================="
kubectl get certificaterequest foo-ca-cr -o jsonpath='{.status.ca}' | base64 -d > /home/vagrant/github.com/istio/ca-certs/foo/istio/root-ca.crt
kubectl get certificaterequest foo-ca-cr -o jsonpath='{.status.certificate}' | base64 -d > /home/vagrant/github.com/istio/ca-certs/foo/istio/ca.crt
sudo cp -f /home/vagrant/github.com/istio/ca-certs/foo/csr/foo-csr-key.pem /home/vagrant/github.com/istio/ca-certs/foo/istio/tls.key
cat /home/vagrant/github.com/istio/ca-certs/foo/istio/ca.crt /home/vagrant/github.com/istio/ca-certs/foo/istio/root-ca.crt > /home/vagrant/github.com/istio/ca-certs/foo/istio/tls.crt

kubectl get certificaterequest bar-ca-cr -o jsonpath='{.status.ca}' | base64 -d > /home/vagrant/github.com/istio/ca-certs/bar/istio/root-ca.crt
kubectl get certificaterequest bar-ca-cr -o jsonpath='{.status.certificate}' | base64 -d > /home/vagrant/github.com/istio/ca-certs/bar/istio/ca.crt
sudo cp -f /home/vagrant/github.com/istio/ca-certs/bar/csr/bar-csr-key.pem /home/vagrant/github.com/istio/ca-certs/bar/istio/tls.key
cat /home/vagrant/github.com/istio/ca-certs/bar/istio/ca.crt /home/vagrant/github.com/istio/ca-certs/bar/istio/root-ca.crt > /home/vagrant/github.com/istio/ca-certs/bar/istio/tls.crt

kubectl get certificaterequest foobar-ca-cr -o jsonpath='{.status.ca}' | base64 -d > /home/vagrant/github.com/istio/ca-certs/foobar/istio/root-ca.crt
kubectl get certificaterequest foobar-ca-cr -o jsonpath='{.status.certificate}' | base64 -d > /home/vagrant/github.com/istio/ca-certs/foobar/istio/ca.crt
sudo cp -f /home/vagrant/github.com/istio/ca-certs/foobar/csr/foobar-csr-key.pem /home/vagrant/github.com/istio/ca-certs/foobar/istio/tls.key
cat /home/vagrant/github.com/istio/ca-certs/foobar/istio/ca.crt /home/vagrant/github.com/istio/ca-certs/foobar/istio/root-ca.crt > /home/vagrant/github.com/istio/ca-certs/foobar/istio/tls.crt
echo "========================================================================================="
echo "============================================== foo ======================================"
pushd /home/vagrant/github.com/istio/ca-certs/foo

echo "========= Create Foo ClusterIssuer Secret"

kubectl create secret generic foo-ca -n cert-manager --from-file=istio/tls.crt --from-file=istio/tls.key
sudo sleep 15

echo "-- Create ClusterIssuer foo\n"
kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: foo
spec:
  ca:
    secretName: foo-ca
EOF
popd
echo "========================================================================================="

echo "============================================== bar ======================================"
pushd /home/vagrant/github.com/istio/ca-certs/bar

echo "========= Create Bar ClusterIssuer Secret"
kubectl create secret generic bar-ca -n cert-manager --from-file=istio/tls.crt --from-file=istio/tls.key 
sudo sleep 15

echo "-- Create ClusterIssuer bar\n"
kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: bar
spec:
  ca:
    secretName: bar-ca
EOF
popd
echo "========================================================================================="

echo "============================================== foobar ============================="
pushd /home/vagrant/github.com/istio/ca-certs/foobar

echo "========= Create Istio-System ClusterIssuer Secret"

kubectl create secret generic foobar-ca -n cert-manager --from-file=istio/tls.crt --from-file=istio/tls.key
sudo sleep 15

echo "-- Create ClusterIssuer foobar\n"
kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: foobar
spec:
  ca:
    secretName: foobar-ca
EOF
popd
echo "=========================================================================================="

sudo sleep 15
kubectl get secret -n cert-manager --sort-by=.metadata.creationTimestamp
echo "=========================================================================================="
kubectl get clusterissuer --sort-by=.metadata.creationTimestamp -o wide
echo "\n===================================  ==============================================="
