#!/bin/bash

# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2022 Intel Corporation

# this script generates the following resources
# A root Certificate
# A secret to store the root certificate
# A root clusterissuer to issue new certificate
# A certificaterequest to generate new certificate using the above clusterissuer

# A new secret to store the certificate generated by the certificaterequest
# A clusterissuer to issue new certificate to the workloads

# delete files and resources created by this script
for i in foo foobar new-istio-system
do
	sudo rm -r ./$i/csr
	sudo rm -r ./$i/istio
	sudo rm -r ./$i/root

	kubectl delete secret -n cert-manager $i-root-ca $i-ca 
	kubectl delete clusterIssuer $i-root-issuer $i
	kubectl delete certificateRequest $i-ca-cr
done

echo "========================================================================================="
for i in foo foobar new-istio-system
do
	pushd ./$i/
	mkdir root csr istio

	echo "========= Create $i Root CA ========="
	openssl genrsa -out root/$i-ca-key.pem 4096
	openssl req -new -key root/$i-ca-key.pem -config root-ca.conf -out root/$i-ca.csr
	openssl x509 -req -days 3650 -signkey root/$i-ca-key.pem -extensions req_ext -extfile root-ca.conf -in root/$i-ca.csr -out root/$i-ca-cert.pem

	echo "========= Create $i Root Secret "
	cp root/$i-ca-cert.pem root/tls.crt
	cp root/$i-ca-key.pem root/tls.key

	# secret
	kubectl create secret generic $i-root-ca -n cert-manager --from-file=root/tls.crt --from-file=root/tls.key
	sudo sleep 10 # for the secret to be available

	echo "========= Create $i Root ClusterIssuer "
	kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: $i-root-issuer
spec:
  ca:
    secretName: $i-root-ca
EOF

	echo "========= Create CSR for $i ClusterIssuer"
	openssl genrsa -out csr/$i-csr-key.pem 4096
	openssl req -new -key csr/$i-csr-key.pem -config root-ca.conf -out csr/$i
	sudo sleep 10 # for clusterIssuer to be available

	echo "========= Create CertificateRequest "
	kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: CertificateRequest
metadata:
  name: $i-ca-cr
spec:
  request: $(cat csr/$i | base64 -w 0)
  isCA: true
  duration: 2160h
  issuerRef:
    name: $i-root-issuer
    kind: ClusterIssuer
    group: cert-manager.io
EOF
	popd
done
echo "=========================================================================================="

echo "-- Wait for clusterissuers and certificaterequests"
sudo sleep 10

kubectl get clusterissuer -o wide
echo "========================================================================================="
kubectl get certificaterequest -o wide
sudo sleep 5

echo "========================================================================================="
echo "==================================== Create CertSigners ==============================================="
for i in foo foobar new-istio-system
do
	kubectl get certificaterequest $i-ca-cr -o jsonpath='{.status.ca}' | base64 -d > ./$i/istio/root-ca.crt
	kubectl get certificaterequest $i-ca-cr -o jsonpath='{.status.certificate}' | base64 -d > ./$i/istio/ca.crt
	sudo cp -f ./$i/csr/$i-csr-key.pem ./$i/istio/tls.key
	cat ./$i/istio/ca.crt ./$i/istio/root-ca.crt > ./$i/istio/tls.crt
done

echo "========================================================================================="

for i in foo foobar new-istio-system
do
	pushd ./$i

	echo "========= Create $i ClusterIssuer Secret"

	kubectl create secret generic $i-ca -n cert-manager --from-file=istio/tls.crt --from-file=istio/tls.key
	sudo sleep 15

	echo "-- Create ClusterIssuer $i"
	kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: $i
spec:
  ca:
    secretName: $i-ca
EOF
	popd
done
echo "=========================================================================================="

sudo sleep 15
kubectl get secret -n cert-manager --sort-by=.metadata.creationTimestamp
echo "=========================================================================================="
kubectl get clusterissuer --sort-by=.metadata.creationTimestamp -o wide
echo "=========================================================================================="
