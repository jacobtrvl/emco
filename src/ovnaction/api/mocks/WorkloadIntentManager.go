// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	"context"
	module "gitlab.com/project-emco/core/emco-base/src/ovnaction/pkg/module"
	mock "github.com/stretchr/testify/mock"
)

// WorkloadIntentManager is an autogenerated mock type for the WorkloadIntentManager type
type WorkloadIntentManager struct {
	mock.Mock
}

// CreateWorkloadIntent provides a mock function with given fields: wi, project, compositeapp, compositeappversion, dig, netcontrolintent, exists
func (_m *WorkloadIntentManager) CreateWorkloadIntent(ctx context.Context, wi module.WorkloadIntent, project string, compositeapp string, compositeappversion string, dig string, netcontrolintent string, exists bool) (module.WorkloadIntent, error) {
	ret := _m.Called(ctx, wi, project, compositeapp, compositeappversion, dig, netcontrolintent, exists)

	var r0 module.WorkloadIntent
	if rf, ok := ret.Get(0).(func(module.WorkloadIntent, string, string, string, string, string, bool) module.WorkloadIntent); ok {
		r0 = rf(wi, project, compositeapp, compositeappversion, dig, netcontrolintent, exists)
	} else {
		r0 = ret.Get(0).(module.WorkloadIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(module.WorkloadIntent, string, string, string, string, string, bool) error); ok {
		r1 = rf(wi, project, compositeapp, compositeappversion, dig, netcontrolintent, exists)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkloadIntent provides a mock function with given fields: name, project, compositeapp, compositeappversion, dig, netcontrolintent
func (_m *WorkloadIntentManager) DeleteWorkloadIntent(ctx context.Context, name string, project string, compositeapp string, compositeappversion string, dig string, netcontrolintent string) error {
	ret := _m.Called(ctx, name, project, compositeapp, compositeappversion, dig, netcontrolintent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) error); ok {
		r0 = rf(name, project, compositeapp, compositeappversion, dig, netcontrolintent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWorkloadIntent provides a mock function with given fields: name, project, compositeapp, compositeappversion, dig, netcontrolintent
func (_m *WorkloadIntentManager) GetWorkloadIntent(ctx context.Context, name string, project string, compositeapp string, compositeappversion string, dig string, netcontrolintent string) (module.WorkloadIntent, error) {
	ret := _m.Called(ctx, name, project, compositeapp, compositeappversion, dig, netcontrolintent)

	var r0 module.WorkloadIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) module.WorkloadIntent); ok {
		r0 = rf(name, project, compositeapp, compositeappversion, dig, netcontrolintent)
	} else {
		r0 = ret.Get(0).(module.WorkloadIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(name, project, compositeapp, compositeappversion, dig, netcontrolintent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkloadIntents provides a mock function with given fields: project, compositeapp, compositeappversion, dig, netcontrolintent
func (_m *WorkloadIntentManager) GetWorkloadIntents(ctx context.Context, project string, compositeapp string, compositeappversion string, dig string, netcontrolintent string) ([]module.WorkloadIntent, error) {
	ret := _m.Called(ctx, project, compositeapp, compositeappversion, dig, netcontrolintent)

	var r0 []module.WorkloadIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) []module.WorkloadIntent); ok {
		r0 = rf(project, compositeapp, compositeappversion, dig, netcontrolintent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.WorkloadIntent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(project, compositeapp, compositeappversion, dig, netcontrolintent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
