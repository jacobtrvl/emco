// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"context"
	"github.com/stretchr/testify/mock"
	module "gitlab.com/project-emco/core/emco-base/src/orchestrator/common"
	"gitlab.com/project-emco/core/emco-base/src/orchestrator/pkg/state"
	"gitlab.com/project-emco/core/emco-base/src/orchestrator/pkg/status"
)

// LogicalCloudManager is an autogenerated mock type for the LogicalCloudManager type
type LogicalCloudManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: project, c
func (_m *LogicalCloudManager) Create(ctx context.Context, project string, c module.LogicalCloud) (module.LogicalCloud, error) {
	ret := _m.Called(ctx, project, c)

	var r0 module.LogicalCloud
	if rf, ok := ret.Get(0).(func(string, module.LogicalCloud) module.LogicalCloud); ok {
		r0 = rf(project, c)
	} else {
		r0 = ret.Get(0).(module.LogicalCloud)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, module.LogicalCloud) error); ok {
		r1 = rf(project, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: project, name
func (_m *LogicalCloudManager) Delete(ctx context.Context, project string, name string) error {
	ret := _m.Called(ctx, project, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(project, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenericStatus provides a mock function with given fields: project, name, qStatusInstance, qType, qOutput, fClusters, fResources
func (_m *LogicalCloudManager) GenericStatus(ctx context.Context, project string, name string, qStatusInstance string, qType string, qOutput string, fClusters []string, fResources []string) (status.StatusResult, error) {
	ret := _m.Called(ctx, project, name, qStatusInstance, qType, qOutput, fClusters, fResources)

	var r0 status.StatusResult
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, []string, []string) status.StatusResult); ok {
		r0 = rf(project, name, qStatusInstance, qType, qOutput, fClusters, fResources)
	} else {
		r0 = ret.Get(0).(status.StatusResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, []string, []string) error); ok {
		r1 = rf(project, name, qStatusInstance, qType, qOutput, fClusters, fResources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: project, name
func (_m *LogicalCloudManager) Get(ctx context.Context, project string, name string) (module.LogicalCloud, error) {
	ret := _m.Called(ctx, project, name)

	var r0 module.LogicalCloud
	if rf, ok := ret.Get(0).(func(string, string) module.LogicalCloud); ok {
		r0 = rf(project, name)
	} else {
		r0 = ret.Get(0).(module.LogicalCloud)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: project
func (_m *LogicalCloudManager) GetAll(ctx context.Context, project string) ([]module.LogicalCloud, error) {
	ret := _m.Called(ctx, project)

	var r0 []module.LogicalCloud
	if rf, ok := ret.Get(0).(func(string) []module.LogicalCloud); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.LogicalCloud)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields: p, lc
func (_m *LogicalCloudManager) GetState(ctx context.Context, p string, lc string) (state.StateInfo, error) {
	ret := _m.Called(ctx, p, lc)

	var r0 state.StateInfo
	if rf, ok := ret.Get(0).(func(string, string) state.StateInfo); ok {
		r0 = rf(p, lc)
	} else {
		r0 = ret.Get(0).(state.StateInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(p, lc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: p, lc, qStatusInstance, qType, qOutput, fClusters, fResources
func (_m *LogicalCloudManager) Status(ctx context.Context, p string, lc string, qStatusInstance string, qType string, qOutput string, fClusters []string, fResources []string) (status.LogicalCloudStatus, error) {
	ret := _m.Called(ctx, p, lc, qStatusInstance, qType, qOutput, fClusters, fResources)

	var r0 status.LogicalCloudStatus
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, []string, []string) status.LogicalCloudStatus); ok {
		r0 = rf(p, lc, qStatusInstance, qType, qOutput, fClusters, fResources)
	} else {
		r0 = ret.Get(0).(status.LogicalCloudStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, []string, []string) error); ok {
		r1 = rf(p, lc, qStatusInstance, qType, qOutput, fClusters, fResources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatusClusters provides a mock function with given fields: p, lc, qStatusInstance
func (_m *LogicalCloudManager) StatusClusters(ctx context.Context, p string, lc string, qStatusInstance string) (status.LogicalCloudClustersStatus, error) {
	ret := _m.Called(ctx, p, lc, qStatusInstance)

	var r0 status.LogicalCloudClustersStatus
	if rf, ok := ret.Get(0).(func(string, string, string) status.LogicalCloudClustersStatus); ok {
		r0 = rf(p, lc, qStatusInstance)
	} else {
		r0 = ret.Get(0).(status.LogicalCloudClustersStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(p, lc, qStatusInstance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatusResources provides a mock function with given fields: p, lc, qStatusInstance, qType, fClusters
func (_m *LogicalCloudManager) StatusResources(ctx context.Context, p string, lc string, qStatusInstance string, qType string, fClusters []string) (status.LogicalCloudResourcesStatus, error) {
	ret := _m.Called(ctx, p, lc, qStatusInstance, qType, fClusters)

	var r0 status.LogicalCloudResourcesStatus
	if rf, ok := ret.Get(0).(func(string, string, string, string, []string) status.LogicalCloudResourcesStatus); ok {
		r0 = rf(p, lc, qStatusInstance, qType, fClusters)
	} else {
		r0 = ret.Get(0).(status.LogicalCloudResourcesStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, []string) error); ok {
		r1 = rf(p, lc, qStatusInstance, qType, fClusters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstantiation provides a mock function with given fields: project, name, c
func (_m *LogicalCloudManager) UpdateInstantiation(ctx context.Context, project string, name string, c module.LogicalCloud) (module.LogicalCloud, error) {
	ret := _m.Called(ctx, project, name, c)

	var r0 module.LogicalCloud
	if rf, ok := ret.Get(0).(func(string, string, module.LogicalCloud) module.LogicalCloud); ok {
		r0 = rf(project, name, c)
	} else {
		r0 = ret.Get(0).(module.LogicalCloud)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, module.LogicalCloud) error); ok {
		r1 = rf(project, name, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLogicalCloud provides a mock function with given fields: project, name, c
func (_m *LogicalCloudManager) UpdateLogicalCloud(ctx context.Context, project string, name string, c module.LogicalCloud) (module.LogicalCloud, error) {
	ret := _m.Called(ctx, project, name, c)

	var r0 module.LogicalCloud
	if rf, ok := ret.Get(0).(func(string, string, module.LogicalCloud) module.LogicalCloud); ok {
		r0 = rf(project, name, c)
	} else {
		r0 = ret.Get(0).(module.LogicalCloud)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, module.LogicalCloud) error); ok {
		r1 = rf(project, name, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
