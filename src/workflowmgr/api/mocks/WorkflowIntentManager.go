// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
	module "gitlab.com/project-emco/core/emco-base/src/workflowmgr/pkg/module"
)

// WorkflowIntentManager is an autogenerated mock type for the WorkflowIntentManager type
type WorkflowIntentManager struct {
	mock.Mock
}

// CancelWorkflowIntent provides a mock function with given fields: name, project, cApp, cAppVer, dig, req
func (_m *WorkflowIntentManager) CancelWorkflowIntent(name string, project string, cApp string, cAppVer string, dig string, req *module.WfTemporalCancelRequest) error {
	ret := _m.Called(name, project, cApp, cAppVer, dig, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, *module.WfTemporalCancelRequest) error); ok {
		r0 = rf(name, project, cApp, cAppVer, dig, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWorkflowIntent provides a mock function with given fields: wfi, project, cApp, cAppVer, dig, exists
func (_m *WorkflowIntentManager) CreateWorkflowIntent(wfi module.WorkflowIntent, project string, cApp string, cAppVer string, dig string, exists bool) (module.WorkflowIntent, error) {
	ret := _m.Called(wfi, project, cApp, cAppVer, dig, exists)

	var r0 module.WorkflowIntent
	if rf, ok := ret.Get(0).(func(module.WorkflowIntent, string, string, string, string, bool) module.WorkflowIntent); ok {
		r0 = rf(wfi, project, cApp, cAppVer, dig, exists)
	} else {
		r0 = ret.Get(0).(module.WorkflowIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(module.WorkflowIntent, string, string, string, string, bool) error); ok {
		r1 = rf(wfi, project, cApp, cAppVer, dig, exists)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkflowIntent provides a mock function with given fields: name, project, cApp, cAppVer, dig
func (_m *WorkflowIntentManager) DeleteWorkflowIntent(name string, project string, cApp string, cAppVer string, dig string) error {
	ret := _m.Called(name, project, cApp, cAppVer, dig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(name, project, cApp, cAppVer, dig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStatusWorkflowIntent provides a mock function with given fields: name, project, cApp, cAppVer, dig, query
func (_m *WorkflowIntentManager) GetStatusWorkflowIntent(name string, project string, cApp string, cAppVer string, dig string, query *module.WfTemporalStatusQuery) (*module.WfTemporalStatusResponse, error) {
	ret := _m.Called(name, project, cApp, cAppVer, dig, query)

	var r0 *module.WfTemporalStatusResponse
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, *module.WfTemporalStatusQuery) *module.WfTemporalStatusResponse); ok {
		r0 = rf(name, project, cApp, cAppVer, dig, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*module.WfTemporalStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, *module.WfTemporalStatusQuery) error); ok {
		r1 = rf(name, project, cApp, cAppVer, dig, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflowIntent provides a mock function with given fields: name, project, cApp, cAppVer, dig
func (_m *WorkflowIntentManager) GetWorkflowIntent(name string, project string, cApp string, cAppVer string, dig string) (module.WorkflowIntent, error) {
	ret := _m.Called(name, project, cApp, cAppVer, dig)

	var r0 module.WorkflowIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) module.WorkflowIntent); ok {
		r0 = rf(name, project, cApp, cAppVer, dig)
	} else {
		r0 = ret.Get(0).(module.WorkflowIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(name, project, cApp, cAppVer, dig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflowIntents provides a mock function with given fields: project, cApp, cAppVer, dig
func (_m *WorkflowIntentManager) GetWorkflowIntents(project string, cApp string, cAppVer string, dig string) ([]module.WorkflowIntent, error) {
	ret := _m.Called(project, cApp, cAppVer, dig)

	var r0 []module.WorkflowIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string) []module.WorkflowIntent); ok {
		r0 = rf(project, cApp, cAppVer, dig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.WorkflowIntent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(project, cApp, cAppVer, dig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartWorkflowIntent provides a mock function with given fields: name, project, cApp, cAppVer, dig
func (_m *WorkflowIntentManager) StartWorkflowIntent(name string, project string, cApp string, cAppVer string, dig string) error {
	ret := _m.Called(name, project, cApp, cAppVer, dig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(name, project, cApp, cAppVer, dig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWorkflowIntentManager creates a new instance of WorkflowIntentManager. It also registers a cleanup function to assert the mocks expectations.
func NewWorkflowIntentManager(t testing.TB) *WorkflowIntentManager {
	mock := &WorkflowIntentManager{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
